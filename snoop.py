from collections import namedtuple

from debug import debug_snoop

BusTxn = namedtuple('BusTxn', ['pn', 'name', 'mem_addr', 'cycles'])

class Snoop():
    def __init__(self, caches):
        self.caches = caches
        self.txns = []
        self.traffic = 0
        self.num_invalidations = 0
        self.cycles_to_block = 0

    def add_txn(self, txn):
        if txn is not None and txn.name is not None:
            self.txns.append(txn)

    def tick(self):
        # tick 1 cycle on the snoop and returns the processors
        # that are allowed to proceed with their instructions
        # the other processors are not allowed to proceed
        if self.cycles_to_block > 0:
            self.cycles_to_block -= 1
            for c in self.caches:
                c.tick()
            return []

        if not self.txns:
            return [c.id for c in self.caches]

        r = self.snoop(self.txns)
        self.txns = []
        return [r]

    def snoop(self, bus_txns):
        # pick 1 to respond to first (for simplicity always choose first)
        print('=== Bus ===')
        print(bus_txns)

        todo = bus_txns[0]

        # only the transaction that is selected gets to commit to new stage
        self.caches[todo.pn].commit()

        # let every other cache to respond to a bus txn
        pn, bt, ma, cycles = todo
        cycles_to_block = cycles
        debug_snoop(pn, bt)
        for c in self.caches:
            if c.id == pn:
                continue

            snoop, cycles = c.bus_action(bt, ma, pn)
            # what kinds of  bus action can be generated by a snoop?
            # can only be a flush
            # flush blocks the entire bus for x cycles
            # assume that in this x cycles ma gets into pn's cache too
            if cycles > 0:
                self.num_invalidations += 1
            cycles_to_block = max(cycles_to_block, cycles)

        for c in self.caches:
            c.block_for(cycles_to_block)

        if (cycles_to_block > 0):
            self.cycles_to_block = cycles_to_block
            self.traffic += 1

        return todo.pn

    def get_summary(self):
        return { 'traffic': self.traffic, 'inval': self.num_invalidations }
